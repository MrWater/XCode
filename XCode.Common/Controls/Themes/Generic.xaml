<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:tabControls="clr-namespace:XCode.Common.Controls.TabControls"
    xmlns:buttons="clr-namespace:XCode.Common.Controls.Buttons"
    xmlns:local="clr-namespace:XCode.Common.Controls"
    xmlns:metro="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro">
    <Style TargetType="{x:Type tabControls:XImgTabItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Padding" Value="6,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="MinWidth" Value="5"/>
        <Setter Property="MinHeight" Value="5"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="metro:ControlsHelper.HeaderFontSize" Value="{DynamicResource tabControls:XImgTabControlFontSize}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type tabControls:XImgTabItem}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <DockPanel.Resources>
                                <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
                            </DockPanel.Resources>
                            <StackPanel Orientation="Horizontal" Background="Transparent">
                                <Border Background="{TemplateBinding Background}"  Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}" Margin="6,5" ToolTip="{TemplateBinding Header}">
                                    <Image Focusable="False" Source="{TemplateBinding ImgSource}" Width="20" Height="20" VerticalAlignment="Center" SnapsToDevicePixels="True"/>
                                </Border>
                                <metro:ContentControlEx x:Name="ContentSite" Margin="0,0,6,0" VerticalContentAlignment="Center" ContentCharacterCasing="{Binding (metro:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" 
                                                        ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" 
                                                        FontWeight="{TemplateBinding metro:ControlsHelper.HeaderFontWeight}" FontStretch="{TemplateBinding metro:ControlsHelper.HeaderFontStretch}" FontSize="16" Padding="5,3" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <metro:ContentControlEx.Visibility>
                                        <Binding Path="(TextVisible)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type tabControls:XImgTabControl}}">
                                            <Binding.Converter>
                                                <BooleanToVisibilityConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </metro:ContentControlEx.Visibility>
                                </metro:ContentControlEx>
                            </StackPanel>
                            <Rectangle x:Name="Underline" Visibility="Collapsed" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Height="2" Margin="0,1,0,0">
                                <!--<Rectangle.Visibility>
                                                <Binding Path="(metro:TabControlHelper.IsUnderlined)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}">
                                                    <Binding.Converter>
                                                        <BooleanToVisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </Rectangle.Visibility>-->
                            </Rectangle>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Right"/>
                            <Setter Property="Width" TargetName="Underline" Value="2"/>
                            <Setter Property="Height" TargetName="Underline" Value="Auto"/>
                            <Setter Property="Margin" TargetName="Underline" Value="1,0,0,0"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Top">
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Bottom"/>
                            <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Right"/>
                            <Setter Property="Height" TargetName="Underline" Value="2"/>
                            <Setter Property="Width" TargetName="Underline" Value="Auto"/>
                            <Setter Property="Margin" TargetName="Underline" Value="0,1,0,0"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Left"/>
                            <Setter Property="Width" TargetName="Underline" Value="2"/>
                            <Setter Property="Height" TargetName="Underline" Value="Auto"/>
                            <Setter Property="Margin" TargetName="Underline" Value="0,0,1,0"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
                            <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Top"/>
                            <Setter Property="Height" TargetName="Underline" Value="2"/>
                            <Setter Property="Width" TargetName="Underline" Value="Auto"/>
                            <Setter Property="Margin" TargetName="Underline" Value="0,0,0,1"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Fill" TargetName="Underline" Value="{DynamicResource BlackBrush}"/>
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Fill" TargetName="Underline" Value="{DynamicResource GrayNormalBrush}"/>
                            <Setter Property="Background" TargetName="Border" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Underline" Value="{DynamicResource GrayHoverBrush}"/>
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource AccentColorBrush3}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource AccentColorBrush}"/>
                            <Setter Property="Fill" TargetName="Underline" Value="{DynamicResource HighlightBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid x:Name="Container" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}">
                        <Label Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" 
                               VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Width="{TemplateBinding Width}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Content" Value="&lt;&lt;"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Content" Value=">>"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type tabControls:XImgTabControl}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type tabControls:XImgTabControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{DynamicResource GrayBrush3}" BorderThickness="0,0,1,0">
                            <Grid Background="{Binding Path=Background, ElementName=HeaderPanel}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="30"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition x:Name="FunctionRow"/>
                                </Grid.RowDefinitions>
                                <Border BorderThickness="0,0,0,1" BorderBrush="{DynamicResource GrayBrush3}">
                                    <ToggleButton x:Name="Expander" IsTabStop="False" Background="Transparent" Foreground="Black" Style="{StaticResource ExpanderStyle}" HorizontalAlignment="Right" VerticalContentAlignment="Center" Width="30" Height="30" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextVisible}"/>
                                </Border>
                                <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Hidden" SnapsToDevicePixels="True">
                                    <TabPanel ScrollViewer.CanContentScroll="True" x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="True" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" Background="{DynamicResource ValidationBrush1}"/>
                                </ScrollViewer>
                            </Grid>
                        </Border>
                        <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabIndex="2">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <!--只管left-->
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsChecked, ElementName=Expander}" Value="False">
                            <Setter Property="Height" Value="90" TargetName="FunctionRow"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsChecked, ElementName=Expander}" Value="True">
                            <Setter Property="Height" Value="30" TargetName="FunctionRow"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type buttons:XImgButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type buttons:XImgButton}">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Image Source="{TemplateBinding ImgSource}" SnapsToDevicePixels="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Margin" Value="2" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
